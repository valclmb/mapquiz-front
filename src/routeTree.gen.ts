/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TrainingRouteImport } from './routes/training'
import { Route as SocialRouteImport } from './routes/social'
import { Route as QuizRouteImport } from './routes/quiz'
import { Route as BugReportRouteImport } from './routes/bug-report'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MultiplayerIndexRouteImport } from './routes/multiplayer/index'
import { Route as MultiplayerLobbyIdRouteImport } from './routes/multiplayer/$lobbyId'
import { Route as MultiplayerLobbyIdIndexRouteImport } from './routes/multiplayer/$lobbyId/index'
import { Route as MultiplayerLobbyIdResultRouteImport } from './routes/multiplayer/$lobbyId/result'
import { Route as MultiplayerLobbyIdLobbyRouteImport } from './routes/multiplayer/$lobbyId/lobby'
import { Route as MultiplayerLobbyIdGameRouteImport } from './routes/multiplayer/$lobbyId/game'

const TrainingRoute = TrainingRouteImport.update({
  id: '/training',
  path: '/training',
  getParentRoute: () => rootRouteImport,
} as any)
const SocialRoute = SocialRouteImport.update({
  id: '/social',
  path: '/social',
  getParentRoute: () => rootRouteImport,
} as any)
const QuizRoute = QuizRouteImport.update({
  id: '/quiz',
  path: '/quiz',
  getParentRoute: () => rootRouteImport,
} as any)
const BugReportRoute = BugReportRouteImport.update({
  id: '/bug-report',
  path: '/bug-report',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MultiplayerIndexRoute = MultiplayerIndexRouteImport.update({
  id: '/multiplayer/',
  path: '/multiplayer/',
  getParentRoute: () => rootRouteImport,
} as any)
const MultiplayerLobbyIdRoute = MultiplayerLobbyIdRouteImport.update({
  id: '/multiplayer/$lobbyId',
  path: '/multiplayer/$lobbyId',
  getParentRoute: () => rootRouteImport,
} as any)
const MultiplayerLobbyIdIndexRoute = MultiplayerLobbyIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MultiplayerLobbyIdRoute,
} as any)
const MultiplayerLobbyIdResultRoute =
  MultiplayerLobbyIdResultRouteImport.update({
    id: '/result',
    path: '/result',
    getParentRoute: () => MultiplayerLobbyIdRoute,
  } as any)
const MultiplayerLobbyIdLobbyRoute = MultiplayerLobbyIdLobbyRouteImport.update({
  id: '/lobby',
  path: '/lobby',
  getParentRoute: () => MultiplayerLobbyIdRoute,
} as any)
const MultiplayerLobbyIdGameRoute = MultiplayerLobbyIdGameRouteImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => MultiplayerLobbyIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bug-report': typeof BugReportRoute
  '/quiz': typeof QuizRoute
  '/social': typeof SocialRoute
  '/training': typeof TrainingRoute
  '/multiplayer/$lobbyId': typeof MultiplayerLobbyIdRouteWithChildren
  '/multiplayer': typeof MultiplayerIndexRoute
  '/multiplayer/$lobbyId/game': typeof MultiplayerLobbyIdGameRoute
  '/multiplayer/$lobbyId/lobby': typeof MultiplayerLobbyIdLobbyRoute
  '/multiplayer/$lobbyId/result': typeof MultiplayerLobbyIdResultRoute
  '/multiplayer/$lobbyId/': typeof MultiplayerLobbyIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bug-report': typeof BugReportRoute
  '/quiz': typeof QuizRoute
  '/social': typeof SocialRoute
  '/training': typeof TrainingRoute
  '/multiplayer': typeof MultiplayerIndexRoute
  '/multiplayer/$lobbyId/game': typeof MultiplayerLobbyIdGameRoute
  '/multiplayer/$lobbyId/lobby': typeof MultiplayerLobbyIdLobbyRoute
  '/multiplayer/$lobbyId/result': typeof MultiplayerLobbyIdResultRoute
  '/multiplayer/$lobbyId': typeof MultiplayerLobbyIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/bug-report': typeof BugReportRoute
  '/quiz': typeof QuizRoute
  '/social': typeof SocialRoute
  '/training': typeof TrainingRoute
  '/multiplayer/$lobbyId': typeof MultiplayerLobbyIdRouteWithChildren
  '/multiplayer/': typeof MultiplayerIndexRoute
  '/multiplayer/$lobbyId/game': typeof MultiplayerLobbyIdGameRoute
  '/multiplayer/$lobbyId/lobby': typeof MultiplayerLobbyIdLobbyRoute
  '/multiplayer/$lobbyId/result': typeof MultiplayerLobbyIdResultRoute
  '/multiplayer/$lobbyId/': typeof MultiplayerLobbyIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bug-report'
    | '/quiz'
    | '/social'
    | '/training'
    | '/multiplayer/$lobbyId'
    | '/multiplayer'
    | '/multiplayer/$lobbyId/game'
    | '/multiplayer/$lobbyId/lobby'
    | '/multiplayer/$lobbyId/result'
    | '/multiplayer/$lobbyId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bug-report'
    | '/quiz'
    | '/social'
    | '/training'
    | '/multiplayer'
    | '/multiplayer/$lobbyId/game'
    | '/multiplayer/$lobbyId/lobby'
    | '/multiplayer/$lobbyId/result'
    | '/multiplayer/$lobbyId'
  id:
    | '__root__'
    | '/'
    | '/bug-report'
    | '/quiz'
    | '/social'
    | '/training'
    | '/multiplayer/$lobbyId'
    | '/multiplayer/'
    | '/multiplayer/$lobbyId/game'
    | '/multiplayer/$lobbyId/lobby'
    | '/multiplayer/$lobbyId/result'
    | '/multiplayer/$lobbyId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BugReportRoute: typeof BugReportRoute
  QuizRoute: typeof QuizRoute
  SocialRoute: typeof SocialRoute
  TrainingRoute: typeof TrainingRoute
  MultiplayerLobbyIdRoute: typeof MultiplayerLobbyIdRouteWithChildren
  MultiplayerIndexRoute: typeof MultiplayerIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/training': {
      id: '/training'
      path: '/training'
      fullPath: '/training'
      preLoaderRoute: typeof TrainingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/social': {
      id: '/social'
      path: '/social'
      fullPath: '/social'
      preLoaderRoute: typeof SocialRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quiz': {
      id: '/quiz'
      path: '/quiz'
      fullPath: '/quiz'
      preLoaderRoute: typeof QuizRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bug-report': {
      id: '/bug-report'
      path: '/bug-report'
      fullPath: '/bug-report'
      preLoaderRoute: typeof BugReportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/multiplayer/': {
      id: '/multiplayer/'
      path: '/multiplayer'
      fullPath: '/multiplayer'
      preLoaderRoute: typeof MultiplayerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/multiplayer/$lobbyId': {
      id: '/multiplayer/$lobbyId'
      path: '/multiplayer/$lobbyId'
      fullPath: '/multiplayer/$lobbyId'
      preLoaderRoute: typeof MultiplayerLobbyIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/multiplayer/$lobbyId/': {
      id: '/multiplayer/$lobbyId/'
      path: '/'
      fullPath: '/multiplayer/$lobbyId/'
      preLoaderRoute: typeof MultiplayerLobbyIdIndexRouteImport
      parentRoute: typeof MultiplayerLobbyIdRoute
    }
    '/multiplayer/$lobbyId/result': {
      id: '/multiplayer/$lobbyId/result'
      path: '/result'
      fullPath: '/multiplayer/$lobbyId/result'
      preLoaderRoute: typeof MultiplayerLobbyIdResultRouteImport
      parentRoute: typeof MultiplayerLobbyIdRoute
    }
    '/multiplayer/$lobbyId/lobby': {
      id: '/multiplayer/$lobbyId/lobby'
      path: '/lobby'
      fullPath: '/multiplayer/$lobbyId/lobby'
      preLoaderRoute: typeof MultiplayerLobbyIdLobbyRouteImport
      parentRoute: typeof MultiplayerLobbyIdRoute
    }
    '/multiplayer/$lobbyId/game': {
      id: '/multiplayer/$lobbyId/game'
      path: '/game'
      fullPath: '/multiplayer/$lobbyId/game'
      preLoaderRoute: typeof MultiplayerLobbyIdGameRouteImport
      parentRoute: typeof MultiplayerLobbyIdRoute
    }
  }
}

interface MultiplayerLobbyIdRouteChildren {
  MultiplayerLobbyIdGameRoute: typeof MultiplayerLobbyIdGameRoute
  MultiplayerLobbyIdLobbyRoute: typeof MultiplayerLobbyIdLobbyRoute
  MultiplayerLobbyIdResultRoute: typeof MultiplayerLobbyIdResultRoute
  MultiplayerLobbyIdIndexRoute: typeof MultiplayerLobbyIdIndexRoute
}

const MultiplayerLobbyIdRouteChildren: MultiplayerLobbyIdRouteChildren = {
  MultiplayerLobbyIdGameRoute: MultiplayerLobbyIdGameRoute,
  MultiplayerLobbyIdLobbyRoute: MultiplayerLobbyIdLobbyRoute,
  MultiplayerLobbyIdResultRoute: MultiplayerLobbyIdResultRoute,
  MultiplayerLobbyIdIndexRoute: MultiplayerLobbyIdIndexRoute,
}

const MultiplayerLobbyIdRouteWithChildren =
  MultiplayerLobbyIdRoute._addFileChildren(MultiplayerLobbyIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BugReportRoute: BugReportRoute,
  QuizRoute: QuizRoute,
  SocialRoute: SocialRoute,
  TrainingRoute: TrainingRoute,
  MultiplayerLobbyIdRoute: MultiplayerLobbyIdRouteWithChildren,
  MultiplayerIndexRoute: MultiplayerIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
